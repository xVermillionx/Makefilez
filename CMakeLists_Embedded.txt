# CMakeLists.txt
cmake_minimum_required(VERSION 3.20 FATAL_ERROR)
project(main)
# project(main LANGUAGES CXX C)

set(EXECUTABLE_NAME ${CMAKE_PROJECT_NAME})

# set(CMAKE_C_STANDARD 11)
# set(CMAKE_C_STANDARD_REQUIRED ON)
# set(CMAKE_C_EXTENSIONS OFF)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Never set in cmake file use env vars and can only be set once
# set(CMAKE_C_COMPILER gcc)
# set(CMAKE_CXX_COMPILER g++)

set(ROOT_DIR ${PROJECT_SOURCE_DIR}) # Change if needed
if (NOT EXISTS ${ROOT_DIR}/.ccls)
  file(CONFIGURE OUTPUT ${ROOT_DIR}/.ccls CONTENT compile_commands.json)
endif()
if (EXISTS ${ROOT_DIR}/.ccls)
  set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
  file(CREATE_LINK ${CMAKE_BINARY_DIR}/compile_commands.json ${ROOT_DIR}/compile_commands.json COPY_ON_ERROR SYMBOLIC)
endif()

set(LINKER_SCRIPT cortex.ld)
set(LINKER_PATH script)
target_link_options(${EXECUTABLE_NAME} PRIVATE
  "-T ${LINKER_SCRIPT}"
  "-L ${LINKER_PATH}"
  "LINKER:-z,defs"
  "LINKER:SHELL:-z defs"
)

target_compile_options(${EXECUTABLE_NAME} PRIVATE
  -Wall
  -Wextra
  -Wpedantic
  -Wconversion
  -Werror=vla
  -lstdc++
)

target_compile_definitions(${EXECUTABLE_NAME} PRIVATE
  $<$<CONFIG:Debug>:DEBUG>
  $<$<CONFIG:Release>:NDEBUG>
)

if(CMAKE_COMPILER_IS_GNUCC)
  message(NOTICE "Using gcc")
  add_library(compile_flags INTERFACE)
  target_compile_options(compile_flags INTERFACE -Wall -Wextra -Wpedantic -Wconversion -Werror=vla -lstdc++)
elseif(CMAKE_COMPILER_IS_GNUCXX)
  message(NOTICE "Using g++")
  add_library(compile_flags INTERFACE)
  target_compile_options(compile_flags INTERFACE -Wall -Wextra -Wpedantic -Wconversion -Werror=vla)
else()
  message(FATAL_ERROR "unknown compiler detected")
endif()

add_custom_target(upload
        COMMAND ${CMAKE_BINARY_DIR}/${EXECUTABLE_NAME}
        DEPENDS ${EXECUTABLE_NAME}
        COMMENT "Uploading Program")

set(MY_LIBS -lm)

file(GLOB_RECURSE SOURCES "src/*.c" "src/*.cpp")
add_executable(${EXECUTABLE_NAME} ${SOURCES})
target_link_libraries(${EXECUTABLE_NAME} compile_flags ${MY_LIBS})


